/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $
 *
 * $Id:$
 */
#ifndef RS232PORTTABLE_H
#define RS232PORTTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(RS-232-MIB)
config_require(RS-232-MIB/rs232PortTable/rs232PortTable_interface)
config_require(RS-232-MIB/rs232PortTable/rs232PortTable_data_access)
config_require(RS-232-MIB/rs232PortTable/rs232PortTable_data_get)
config_require(RS-232-MIB/rs232PortTable/rs232PortTable_data_set)
    /* *INDENT-ON*  */

/* OID and column number definitions for rs232PortTable */
#include "rs232PortTable_oids.h"

/* enum definions */
#include "rs232PortTable_enums.h"

/* *********************************************************************
 * function declarations
 */
void init_rs232PortTable(void);
void shutdown_rs232PortTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table rs232PortTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * RS-232-MIB::rs232PortTable is subid 2 of rs232.
 * Its status is Current.
 * OID: .1.3.6.1.2.1.10.33.2, length: 9
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review rs232PortTable registration context.
     */
typedef netsnmp_data_list rs232PortTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review rs232PortTable data context structure.
 * This structure is used to represent the data for rs232PortTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * rs232PortTable.
 */
typedef struct rs232PortTable_data_s {
    
        /*
         * rs232PortType(2)/INTEGER/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
   u_long   rs232PortType;
    
        /*
         * rs232PortInSigNumber(3)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   rs232PortInSigNumber;
    
        /*
         * rs232PortOutSigNumber(4)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
   long   rs232PortOutSigNumber;
    
        /*
         * rs232PortInSpeed(5)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   rs232PortInSpeed;
    
        /*
         * rs232PortOutSpeed(6)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   rs232PortOutSpeed;
    
        /*
         * rs232PortInFlowType(7)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   rs232PortInFlowType;
    
        /*
         * rs232PortOutFlowType(8)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
         */
   u_long   rs232PortOutFlowType;
    
} rs232PortTable_data;


/* *********************************************************************
 * TODO:115:o: |-> Review rs232PortTable undo context.
 * We're just going to use the same data structure for our
 * undo_context. If you want to do something more efficent,
 * define your typedef here.
 */
typedef rs232PortTable_data rs232PortTable_undo_data;

/*
 * TODO:120:r: |-> Review rs232PortTable mib index.
 * This structure is used to represent the index for rs232PortTable.
 */
typedef struct rs232PortTable_mib_index_s {

        /*
         * rs232PortIndex(1)/InterfaceIndex/ASN_INTEGER/long(long)//l/A/w/e/R/d/H
         */
   long   rs232PortIndex;


} rs232PortTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review rs232PortTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
*/
#define MAX_rs232PortTable_IDX_LEN     1


/* *********************************************************************
 * TODO:130:o: |-> Review rs232PortTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * rs232PortTable_rowreq_ctx pointer.
 */
typedef struct rs232PortTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_rs232PortTable_IDX_LEN];
    
    rs232PortTable_mib_index        tbl_idx;
    
    rs232PortTable_data              data;
    rs232PortTable_undo_data       * undo;
    unsigned int                column_set_flags; /* flags for set columns */


    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to rs232PortTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *rs232PortTable_data_list;

} rs232PortTable_rowreq_ctx;

typedef struct rs232PortTable_ref_rowreq_ctx_s {
    rs232PortTable_rowreq_ctx *rowreq_ctx;
} rs232PortTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int rs232PortTable_pre_request(rs232PortTable_registration * user_context);
    int rs232PortTable_post_request(rs232PortTable_registration * user_context,
        int rc);

    int rs232PortTable_rowreq_ctx_init(rs232PortTable_rowreq_ctx *rowreq_ctx,
                                   void *user_init_ctx);
    void rs232PortTable_rowreq_ctx_cleanup(rs232PortTable_rowreq_ctx *rowreq_ctx);

    int rs232PortTable_commit(rs232PortTable_rowreq_ctx * rowreq_ctx);

    rs232PortTable_rowreq_ctx *
                  rs232PortTable_row_find_by_mib_index(rs232PortTable_mib_index *mib_idx);

extern const oid rs232PortTable_oid[];
extern const int rs232PortTable_oid_size;


#include "rs232PortTable_interface.h"
#include "rs232PortTable_data_access.h"
#include "rs232PortTable_data_get.h"
#include "rs232PortTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* RS232PORTTABLE_H */
/** @} */
